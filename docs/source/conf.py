#!/usr/bin/env python
#
# pyesmda documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.

import datetime

# FIX: https://github.com/mgaitan/sphinxcontrib-mermaid/issues/72
import errno
import os
import sys
from subprocess import check_output

import sphinx.util.osutil
from sphinx.ext.napoleon.docstring import GoogleDocstring

import iterative_ensemble_smoother as ies

sphinx.util.osutil.ENOENT = errno.ENOENT


package_path = os.path.abspath("..")
sys.path.insert(0, package_path)


def skip(app, what, name, obj, skip, options):
    if name in ["__call__"]:
        return False
    return skip


def setup(app):
    app.connect("autodoc-skip-member", skip)


project = "iterative_ensemble_smoother"
author = "Equinor"
copyright = f"2022-{datetime.datetime.today().year}, {author}"
release = ies.__version__
version = ies.__version__

check_output(["jupytext", "Polynomial.py", "-o", "Polynomial.ipynb"])

check_output(["jupytext", "Oscillator.py", "-o", "Oscillator.ipynb"])

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    "sphinx.ext.todo",  # Support for todo items
    "sphinx.ext.autodoc",  # Core library for html generation from docstrings
    "sphinx.ext.autosummary",  # Create neat summary tables
    "sphinx.ext.napoleon",  # autodoc understands numpy docstrings
    "sphinx.ext.doctest",  # Test snippets in the documentation
    "sphinx.ext.viewcode",  # Add links to highlighted source code
    "sphinx.ext.intersphinx",  # Link to other projects’ documentation
    "sphinx.ext.autosectionlabel",  # Allow reference sections using its title
    # allows BibTeX citations to be inserted into documentation generated by Sphinx
    "sphinxcontrib.bibtex",
    "sphinx.ext.viewcode",  # Add links to highlighted source code
    "sphinx.ext.intersphinx",  # Link to other projects’ documentation
    "sphinx.ext.autosectionlabel",  # Allow reference sections using its title
    # 'sphinx.ext.mathjax',
    "nbsphinx",  # provides a source parser for *.ipynb files.
    # allows you to include Jupyter notebooks that sit outside your sphinx source
    # directory in your documentation.
    "nbsphinx_link",
    # enables running code embedded in Sphinx documentation and embedding output
    # of that code into the resulting document
    "jupyter_sphinx",
    "numpydoc",
    "m2r2",  # compatibility with markdown
]

# -----------------------------------------------------------------------------
# Autosummary
# -----------------------------------------------------------------------------

# autosummaries from source-files
autosummary_generate = True
# dont show __init__ docstring
autoclass_content = "class"
# sort class members
autodoc_member_order = "groupwise"
# autodoc_member_order = 'bysource'

autosummary_generate = True  # Turn on sphinx.ext.autosummary
# This is because numpydoc screew up with autosummary
# numpydoc_show_class_members=False

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = False
# napoleon_use_admonition_for_examples = False
# napoleon_use_admonition_for_notes = False
# napoleon_use_admonition_for_references = False
napoleon_use_ivar = True
# napoleon_use_param = True
# napoleon_use_rtype = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# Add any external modules you want to refer to in the docs here.
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = [".rst", ".ipynb"]

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["build", "_templates/*.rst'", "Thumbs.db", ".DS_Store"]

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True  # set False by default, enable for debugging


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = "sphinx_rtd_theme"
html_theme = "pydata_sphinx_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    # "google_analytics_id": "UA-140243896-1",
    "show_prev_next": False,
    "github_url": "https://github.com/equinor/iterative_ensemble_smoother",
    "icon_links": [
        {
            "name": "Support",
            "url": "https://github.com/equinor/iterative_ensemble_smoother/issues",
            "icon": "fa fa-comment fa-fw",
        },
        # {
        #     "name": "The Paper",
        #     "url": "https://doi.org/10.21105/joss.01450",
        #     "icon": "fa fa-file-text fa-fw",
        # },
    ],
}

# Bibliography
bibtex_bibfiles = ["./refs.bib"]
bibtex_default_style = "unsrt"
bibtex_reference_style = "author_year"
suppress_warnings = ["bibtex.duplicate_citation", "autosectionlabel.*"]


numpydoc_class_members_toctree = False

# Issue with attributes section, see:
# https://github.com/sphinx-doc/sphinx/issues/2115
# Solution:
# https://michaelgoerz.net/notes/extending-sphinx-napoleon-docstring-sections.html
# -- Extensions to the  Napoleon GoogleDocstring class ---------------------

# first, we define new methods for any new sections and add them to the class


def parse_keys_section(self, section):
    return self._format_fields("Keys", self._consume_fields())


GoogleDocstring._parse_keys_section = parse_keys_section


def parse_attributes_section(self, section):
    return self._format_fields("Attributes", self._consume_fields())


GoogleDocstring._parse_attributes_section = parse_attributes_section


def parse_class_attributes_section(self, section):
    return self._format_fields("Class Attributes", self._consume_fields())


GoogleDocstring._parse_class_attributes_section = parse_class_attributes_section

# we now patch the parse method to guarantee that the the above methods are
# assigned to the _section dict


def patched_parse(self):
    self._sections["keys"] = self._parse_keys_section
    self._sections["class attributes"] = self._parse_class_attributes_section
    self._unpatched_parse()


GoogleDocstring._unpatched_parse = GoogleDocstring._parse
GoogleDocstring._parse = patched_parse
